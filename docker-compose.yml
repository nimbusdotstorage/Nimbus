services:
  # Database Service
  db:
    image: postgres:16
    container_name: nimbus-db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nimbus-network

  # Cache Service
  cache:
    image: valkey/valkey:latest
    container_name: nimbus-cache
    restart: unless-stopped
    env_file: .env
    environment:
      - VALKEY_USERNAME=valkey
      - VALKEY_PASSWORD=valkey
    ports:
      - "6379:6379"
    command:
      [
        "valkey-server",
        "--requirepass",
        "valkey",
        "--user",
        "valkey",
        "on",
        "+@all",
        "~*",
        ">valkey",
        "--appendonly",
        "yes",
      ]
    volumes:
      - valkey-data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "-a", "${VALKEY_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - nimbus-network

  # Server Service
  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
      target: runner
    container_name: nimbus-server
    restart: unless-stopped
    env_file: .env
    environment:
      NODE_ENV: production
      PORT: ${SERVER_PORT:-1284}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Valkey connection settings with username/password
      VALKEY_HOST: cache
      VALKEY_PORT: 6379
      VALKEY_USERNAME: valkey
      VALKEY_PASSWORD: valkey
      # Connection URL format with username and password
      VALKEY_URL: valkey://valkey:valkey@cache:6379/0
    ports:
      - "${SERVER_PORT:-1284}:${SERVER_PORT:-1284}"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    networks:
      - nimbus-network

  # Web Service
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
    container_name: nimbus-web
    restart: unless-stopped
    env_file: .env
    environment:
      NODE_ENV: production
      PORT: ${WEB_PORT:-3000}
      BACKEND_URL: ${BACKEND_URL}
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL}
      NEXT_PUBLIC_CALLBACK_URL: ${NEXT_PUBLIC_CALLBACK_URL}
    ports:
      - "${WEB_PORT:-3000}:${WEB_PORT:-3000}"
    depends_on:
      server:
        condition: service_started
    networks:
      - nimbus-network

volumes:
  postgres-data:
    name: nimbus-postgres-data
  valkey-data:
    name: nimbus-valkey-data

networks:
  nimbus-network:
    driver: bridge
